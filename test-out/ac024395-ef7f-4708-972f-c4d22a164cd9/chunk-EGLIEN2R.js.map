{
  "version": 3,
  "sources": ["angular:jit:template:src\\app\\component\\answer\\answer.html", "angular:jit:style:src\\app\\component\\answer\\answer.scss", "src/app/component/answer/answer.ts"],
  "sourcesContent": ["<li class={{answerFormatting()}}>\r\n    <button\r\n        class=\"button-link\"\r\n        [innerHTML]=\"sanitizedPrompt\"\r\n        (click)=\"answerClicked(prompt())\"\r\n        (keypress)=\"answerClicked(prompt())\"\r\n    >\r\n    </button>\r\n</li>", "/* src/app/component/answer/answer.scss */\n.answer {\n  margin-bottom: 5px;\n  cursor: pointer;\n  width: 95%;\n}\n.answer-disabled {\n  margin-bottom: 5px;\n  width: 95%;\n  cursor: auto;\n}\n.answer-wrong {\n  margin-bottom: 5px;\n  width: 95%;\n  cursor: auto;\n  background-color: #ff2400;\n}\n.answer:hover {\n  background-color: blanchedalmond;\n}\n.answer-selected {\n  background-color: lightgreen;\n}\n.button-link {\n  background: none !important;\n  border: none;\n  padding: 0 !important;\n  cursor: pointer;\n  text-align: left;\n  width: 100%;\n  font-weight: 400;\n}\n.button-link:active {\n  background-color: blanchedalmond;\n}\n/*# sourceMappingURL=answer.css.map */\n", "import { Component, inject, input, OnInit, output } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-answer',\r\n  imports: [],\r\n  templateUrl: './answer.html',\r\n  styleUrl: './answer.scss'\r\n})\r\nexport class Answer implements OnInit {\r\n  sanitizer = inject(DomSanitizer);\r\n  \r\n  prompt = input.required<string>();\r\n  answerNumber = input.required<number>();\r\n  answer = input.required<string>();\r\n  correctAnswer = input.required<string>();\r\n  wasAnswered = input.required<boolean>();\r\n  setAnswer = output<string>();\r\n\r\n  // For displaying HTML in the answer that was passed in\r\n  sanitizedPrompt: SafeHtml = \"\";\r\n\r\n  ngOnInit(): void {\r\n    this.sanitizedPrompt = this.sanitizer.bypassSecurityTrustHtml(`${this.answerNumber()}. ${this.prompt()}`);\r\n  }\r\n\r\n  answerClicked(clickedPrompt: string) {\r\n    if (!this.wasAnswered()) {\r\n      this.setAnswer.emit(clickedPrompt);\r\n    }\r\n  }\r\n\r\n  answerFormatting(): string {\r\n    const start = (this.wasAnswered()) ? 'answer-disabled ' : 'answer ';\r\n    const selected = (this.prompt() === this.answer()) ? 'answer-selected' : '';\r\n    const wrongAnswer = (this.wasAnswered() && this.correctAnswer() !== this.answer() && this.prompt() === this.correctAnswer()) ? 'answer-wrong' : '';\r\n\r\n    return start + selected + wrongAnswer;\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA;AAAA,IAAAC,eAAA;AAAA;AAAA,IAAAD,kBAAA;AAAA;AAAA;;;ICSa;;;;;;;AATb;AACA;;AAQO,IAAM,SAAN,MAAME,QAAM;MACjB,YAAY,OAAO,YAAY;eAEtB,MAAM,SAAQ;qBACR,MAAM,SAAQ;eACpB,MAAM,SAAQ;sBACP,MAAM,SAAQ;oBAChB,MAAM,SAAQ;MAC5B,YAAY,OAAM;;MAGlB,kBAA4B;MAE5B,WAAQ;AACN,aAAK,kBAAkB,KAAK,UAAU,wBAAwB,GAAG,KAAK,aAAY,CAAE,KAAK,KAAK,OAAM,CAAE,EAAE;MAC1G;MAEA,cAAc,eAAqB;AACjC,YAAI,CAAC,KAAK,YAAW,GAAI;AACvB,eAAK,UAAU,KAAK,aAAa;QACnC;MACF;MAEA,mBAAgB;AACd,cAAM,QAAS,KAAK,YAAW,IAAM,qBAAqB;AAC1D,cAAM,WAAY,KAAK,OAAM,MAAO,KAAK,OAAM,IAAM,oBAAoB;AACzE,cAAM,cAAe,KAAK,YAAW,KAAM,KAAK,cAAa,MAAO,KAAK,OAAM,KAAM,KAAK,OAAM,MAAO,KAAK,cAAa,IAAM,iBAAiB;AAEhJ,eAAO,QAAQ,WAAW;MAC5B;;;;;;;;;;AA7BW,aAAM,WAAA;MANlB,UAAU;QACT,UAAU;QACV,SAAS,CAAA;QACT,UAAA;;OAED;OACY,MAAM;;;",
  "names": ["answer_default", "init_answer", "Answer"]
}
