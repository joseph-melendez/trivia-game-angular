{
  "version": 3,
  "sources": ["angular:jit:template:src\\app\\play\\play.html", "angular:jit:style:src\\app\\play\\play.scss", "src/app/play/play.ts", "src/app/data/GetQuestionsResponse.json", "src/app/play/play.spec.ts"],
  "sourcesContent": ["@if (!questions().length) {\r\n    <p>Loading...</p>\r\n} @else if (questionIndex() >= questions().length) {\r\n    <p>\r\n        You answered {{ correctAnswerCount() }} of {{ questions().length }} questions correctly.\r\n    </p>\r\n    <p>\r\n        <a\r\n            (click)=\"playAgain()\"\r\n            (keypress)=\"playAgain()\"\r\n            tabindex=\"0\"\r\n        >\r\n            Play Again\r\n        </a>\r\n    </p>\r\n} @else {\r\n    <div>\r\n        <app-questionxofx [questionNumber]=\"question().number\" [totalQuestions]=\"questions().length\" />\r\n        <hr />\r\n        <app-categoryanddifficulty [category]=\"question().category\" [difficulty]=\"question().difficulty\" />\r\n        <br />\r\n        <app-question [question]=\"question().question\" />\r\n        <app-answers\r\n            [question]=\"question()\"\r\n            [answer]=\"answer()\"\r\n            [wasAnswered]=\"wasAnswered()\"\r\n            (setAnswer)=\"setAnswer($event)\"\r\n        />\r\n        <p>\r\n    @if (wasAnswered()) {\r\n        @if (isCorrect()) {\r\n            <b>You are correct!</b><br /><br />\r\n        } @else {\r\n            That is incorrect.<br />\r\n            The correct answer is:&nbsp;\r\n            <b [innerHTML]=\"sanitizedAnswer()\"></b>\r\n        }\r\n    } @else {\r\n        <br /><br />\r\n    }\r\n            </p>\r\n            <p>\r\n                <button\r\n                    class=\"button-ok\"\r\n                    (click)=\"onClick()\"\r\n                    keydown=\"\"\r\n                    [disabled]=\"answer().length === 0\"\r\n                    [tabIndex]=\"0\"\r\n                >\r\n                    {{ buttonName() }}\r\n                </button>\r\n            </p>\r\n        </div>\r\n}", "/* src/app/play/play.scss */\n/*# sourceMappingURL=play.css.map */\n", "import { Component, inject, OnInit, signal } from '@angular/core';\r\nimport { Difficulty as DifficultyType } from '../types/Difficulty';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { QUESTIONS_MAX, QUESTIONS_MIN } from '../types/Constants';\r\nimport { getFormattedQuestions, QuestionService } from '../services/question-service';\r\nimport { catchError } from 'rxjs';\r\nimport { Question as QuestionType } from '../types/Question';\r\nimport { Questionxofx } from \"../component/questionxofx/questionxofx\";\r\nimport { Categoryanddifficulty } from '../component/categoryanddifficulty/categoryanddifficulty';\r\nimport { Question } from '../component/question/question';\r\nimport { Answers } from \"../component/answers/answers\";\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-play',\r\n  imports: [Questionxofx, Categoryanddifficulty, Question, Answers],\r\n  templateUrl: './play.html',\r\n  styleUrl: './play.scss'\r\n})\r\nexport class Play implements OnInit {\r\n  router = inject(Router);\r\n  route = inject(ActivatedRoute);\r\n  sanitizer = inject(DomSanitizer);\r\n  \r\n  questionService = inject(QuestionService);\r\n  questions = signal<QuestionType[]>([]);\r\n  questionIndex = signal<number>(0);\r\n  wasAnswered = signal<boolean>(false);\r\n  answer = signal<string>('');\r\n  isCorrect = signal<boolean>(false);\r\n  correctAnswerCount = signal<number>(0);\r\n  sanitizedAnswer = signal<SafeHtml>('');\r\n  question = signal<QuestionType>({} as QuestionType);\r\n\r\n  ngOnInit(): void {\r\n    // Get the requested route value...\r\n    const numberOfQuestions = Number(this.route.snapshot.paramMap.get('questions'));\r\n    let difficulty = DifficultyType.any;\r\n    \r\n    // And query parameters\r\n    this.route.queryParams.subscribe(params => {\r\n      difficulty = params['difficulty'];\r\n    });\r\n\r\n    // If a proper number wasn't passed into the app, return to the start page\r\n    if (isNaN(numberOfQuestions) || numberOfQuestions == null || numberOfQuestions < QUESTIONS_MIN || numberOfQuestions > QUESTIONS_MAX) {\r\n      this.router.navigate(['/']);\r\n    }\r\n\r\n    // Retrieve the questions\r\n    this.questionService.getQuestions(numberOfQuestions, difficulty as DifficultyType)\r\n      .pipe(\r\n        catchError((err) => {\r\n          console.error(err);\r\n          throw err;\r\n        })\r\n      )\r\n      .subscribe((rawQuestions) => {\r\n        // Take the RawQuestions reponse and transform it to our internal format\r\n        const formattedQuestions = getFormattedQuestions(rawQuestions)\r\n        this.questions.set(formattedQuestions);\r\n        this.question.set(formattedQuestions[0]);\r\n      });\r\n  }\r\n\r\n  setAnswer(answer: string) {\r\n    this.answer.set(answer);\r\n  }\r\n\r\n  onClick() {\r\n    console.log(\"joe joe joe joe joe\", this.question().number, this.wasAnswered());\r\n\r\n    if (this.wasAnswered()) {\r\n      const nextQuestionNumber = this.questionIndex() + 1;\r\n\r\n      this.questionIndex.set(nextQuestionNumber);\r\n      this.question.set((nextQuestionNumber < this.questions().length) ? this.questions()[nextQuestionNumber] : {} as QuestionType);\r\n      this.wasAnswered.set(false);\r\n      this.answer.set('');\r\n    } else {\r\n      this.wasAnswered.set(true);\r\n      this.isCorrect.set(this.answer() == this.question().answer);\r\n\r\n      if (this.isCorrect()) {\r\n        this.correctAnswerCount.set(this.correctAnswerCount() + 1);\r\n      } else {\r\n        this.sanitizedAnswer.set(this.sanitizer.bypassSecurityTrustHtml(this.question().answer));\r\n      }\r\n    }\r\n  }\r\n\r\n  buttonName() {\r\n    return (this.wasAnswered()) ? \"Next Question\" : \"Answer\";\r\n  }\r\n\r\n  playAgain() {\r\n    this.router.navigate(['']);\r\n  }\r\n}\r\n", "{\r\n    \"response_code\": 0,\r\n    \"results\": [\r\n      {\r\n        \"type\": \"multiple\",\r\n        \"difficulty\": \"hard\",\r\n        \"category\": \"Science: Computers\",\r\n        \"question\": \"America Online (AOL) started out as which of these online service providers?\",\r\n        \"correct_answer\": \"Quantum Link\",\r\n        \"incorrect_answers\": [\r\n          \"CompuServe\",\r\n          \"Prodigy\",\r\n          \"GEnie\"\r\n        ]\r\n      },\r\n      {\r\n        \"type\": \"boolean\",\r\n        \"difficulty\": \"easy\",\r\n        \"category\": \"Entertainment: Video Games\",\r\n        \"question\": \"Deus Ex (2000) does not feature the World Trade Center because it was destroyed by terrorist attacks according to the game&#039;s plot.\",\r\n        \"correct_answer\": \"True\",\r\n        \"incorrect_answers\": [\r\n          \"False\"\r\n        ]\r\n      },\r\n      {\r\n        \"type\": \"multiple\",\r\n        \"difficulty\": \"medium\",\r\n        \"category\": \"Entertainment: Japanese Anime &amp; Manga\",\r\n        \"question\": \"Which of these is not a world in the anime &quot;Buddyfight&quot;?\",\r\n        \"correct_answer\": \"Ancient Dragon World\",\r\n        \"incorrect_answers\": [\r\n          \"Dragon World\",\r\n          \"Star Dragon World\",\r\n          \"Darkness Dragon World\"\r\n        ]\r\n      },\r\n      {\r\n        \"type\": \"boolean\",\r\n        \"difficulty\": \"medium\",\r\n        \"category\": \"Entertainment: Video Games\",\r\n        \"question\": \"In &quot;Super Mario World&quot;, the rhino mini-boss, Reznor, is named after the lead singer of the band &quot;Nine Inch Nails&quot;.\",\r\n        \"correct_answer\": \"True\",\r\n        \"incorrect_answers\": [\r\n          \"False\"\r\n        ]\r\n      },\r\n      {\r\n        \"type\": \"boolean\",\r\n        \"difficulty\": \"easy\",\r\n        \"category\": \"General Knowledge\",\r\n        \"question\": \"A scientific study on peanuts in bars found traces of over 100 unique specimens of urine.\",\r\n        \"correct_answer\": \"False\",\r\n        \"incorrect_answers\": [\r\n          \"True\"\r\n        ]\r\n      },\r\n      {\r\n        \"type\": \"multiple\",\r\n        \"difficulty\": \"medium\",\r\n        \"category\": \"Entertainment: Video Games\",\r\n        \"question\": \"Which of these is NOT a playable character race in the video game &quot;Starbound&quot;?\",\r\n        \"correct_answer\": \"Fenerox\",\r\n        \"incorrect_answers\": [\r\n          \"Floran\",\r\n          \"Novakid\",\r\n          \"Hylotl\"\r\n        ]\r\n      },\r\n      {\r\n        \"type\": \"multiple\",\r\n        \"difficulty\": \"easy\",\r\n        \"category\": \"Entertainment: Music\",\r\n        \"question\": \"Which English guitarist has the nickname &quot;Slowhand&quot;?\",\r\n        \"correct_answer\": \"Eric Clapton\",\r\n        \"incorrect_answers\": [\r\n          \"Mark Knopfler\",\r\n          \"Jeff Beck\",\r\n          \"Jimmy Page\"\r\n        ]\r\n      },\r\n      {\r\n        \"type\": \"boolean\",\r\n        \"difficulty\": \"medium\",\r\n        \"category\": \"Science: Computers\",\r\n        \"question\": \"The &#039;Raspberry Pi&#039; series of single-board computers were created in the United States.\",\r\n        \"correct_answer\": \"False\",\r\n        \"incorrect_answers\": [\r\n          \"True\"\r\n        ]\r\n      },\r\n      {\r\n        \"type\": \"boolean\",\r\n        \"difficulty\": \"easy\",\r\n        \"category\": \"Entertainment: Video Games\",\r\n        \"question\": \"Big the Cat is a playable character in &quot;Sonic Generations&quot;.\",\r\n        \"correct_answer\": \"False\",\r\n        \"incorrect_answers\": [\r\n          \"True\"\r\n        ]\r\n      },\r\n      {\r\n        \"type\": \"multiple\",\r\n        \"difficulty\": \"medium\",\r\n        \"category\": \"Entertainment: Japanese Anime &amp; Manga\",\r\n        \"question\": \"In &quot;Puella Magi Madoka Magica&quot;, what is the first name of Madoka&#039;s younger brother?\",\r\n        \"correct_answer\": \"Tatsuya\",\r\n        \"incorrect_answers\": [\r\n          \"Montoya\",\r\n          \"Tomohisa\",\r\n          \"Minato\"\r\n        ]\r\n      }\r\n    ]\r\n  }", "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { Play } from './play';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { of } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { createSpyFromClass, Spy } from 'jasmine-auto-spies';\r\nimport { QuestionService } from '../services/question-service';\r\nimport rawQuestionsJson from '../data/GetQuestionsResponse.json';\r\n\r\ndescribe('Play', () => {\r\n  let component: Play;\r\n  let fixture: ComponentFixture<Play>;\r\n  let httpSpy: Spy<HttpClient>;\r\n\r\n  const activatedRouteMock = {\r\n    snapshot: {\r\n      paramMap: new Map([['questions', '10']])\r\n    },\r\n    queryParams: of({ difficulty: 'medium' }),\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [Play],\r\n      providers: [\r\n        QuestionService,\r\n        { provide: HttpClient, useValue: createSpyFromClass(HttpClient) },\r\n\t\t\t\t{ provide: ActivatedRoute, useValue: activatedRouteMock },\r\n\t\t\t],\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(Play);\r\n    component = fixture.componentInstance;\r\n\r\n    httpSpy = TestBed.inject(HttpClient) as Spy<HttpClient>;\r\n    httpSpy.get.and.nextWith(rawQuestionsJson);\r\n\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n"],
  "mappings": "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",
  "names": ["play_default", "init_play", "Play", "init_play"]
}
